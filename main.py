import logging
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

from database import SQLdatabase

load_dotenv()

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv('API_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
db = SQLdatabase()


class Reminder(StatesGroup):
    choose_name = State()
    choose_level = State()


available_power = ["–æ—á–µ–Ω—å –≤–∞–∂–Ω–æ", "—Å—Ä–µ–¥–Ω–µ", "–∑–∞–º–µ—Ç–∫–∞"]


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã  """
    if not db.user_exist(message.from_user.id):
        db.create_user(message.from_user.id)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç ,{message.from_user.full_name}! –Ø –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üë©‚Äç‚öïÔ∏è. –î–µ–ª–∞–π –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–º–æ—Ç—Ä–∏ –∏—Ö –Ω–∞ –ª—é–±–æ–º "
        f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã—Ç—å.\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ /help ")


@dp.message_handler(commands=['help'])
async def process_start_command(message: types.Message):
    """–•–µ–ª–ø """
    text = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ /add\nüóÇ –í—Å–µ –∑–∞–ø–∏—Å–∏ /get\nüìä –ó–∞–ø–∏—Å–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ /list"
    await message.answer(text)


@dp.message_handler(commands=['add'], state="*")
async def rem_start(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ç—Ä—ë—Ö —Å—Ç–µ–π—Ç–∞—Ö """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    await Reminder.choose_name.set()


@dp.message_handler(state=Reminder.choose_name)
async def rem_chosen(message: types.Message, state: FSMContext):
    if message.text.lower() in ["/get", "/add", "/help"]:
        await message.answer("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç ‚ö†Ô∏è")
        return

    id_u = db.get_id(message.from_user.id)
    await state.update_data(id_u=id_u)
    db.make_record(message.text, id_u)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for size in available_power:
        keyboard.add(size)
    await Reminder.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å:", reply_markup=keyboard)


@dp.message_handler(state=Reminder.choose_level)
async def rem_power_chosen(message: types.Message, state: FSMContext):
    if message.text.lower() not in available_power:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    date = await state.get_data()
    id_note = date["id_u"]
    power = {
        "–æ—á–µ–Ω—å –≤–∞–∂–Ω–æ": 1,
        "—Å—Ä–µ–¥–Ω–µ": 2,
        "–∑–∞–º–µ—Ç–∫–∞": 3
    }
    db.add_power(id_note, power[message.text.lower()])

    await message.answer("–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üì©\n–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ /get", reply_markup=types.ReplyKeyboardRemove())

    await state.finish()


@dp.message_handler(commands=['get'])
async def get_notes(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ —é–∑–µ—Ä–∞"""
    id_u = db.get_id(message.from_user.id)
    rec = db.get_records(id_u)
    try:
        await message.answer(rec)
    except Exception:
        await message.answer("–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚ö†Ô∏è\n–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å /add")


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def delete(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    row_id = int(message.text[4:])
    id_u = db.get_id(message.from_user.id)
    try:
        db.delete_record(row_id, id_u)
    except Exception:
        await message.answer("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚ö†Ô∏è")
        return
    await message.answer('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞‚ôªÔ∏è\n–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø–∏—Å—è–º /get')


@dp.message_handler(commands=["list"], state="*")
async def list_notes(message: types.Message):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
    id_u = db.get_id(message.from_user.id)
    power = db.get_counts(id_u)
    buttons = [types.InlineKeyboardButton(text=f"–æ—á–µ–Ω—å –≤–∞–∂–Ω–æ ({power[0]})", callback_data="1"),
               types.InlineKeyboardButton(text=f"—Å—Ä–µ–¥–Ω–µ ({power[1]})", callback_data="2"),
               types.InlineKeyboardButton(text=f"–∑–∞–º–µ—Ç–∫–∞ ({power[2]})", callback_data="3")]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–∏—Ä–µ—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å üì¢", reply_markup=keyboard)


powers = ["1", "2", "3"]


@dp.callback_query_handler(text=powers)
async def send_power(call: types.CallbackQuery):
    id_u = db.get_id(call.from_user.id)
    rec = db.get_records_power(id_u, int(call.data))
    try:
        await call.message.answer(rec)
    except Exception:
        await call.message.answer("–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚ö†Ô∏è\n–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å /add")


@dp.message_handler()
async def echo(message: types.Message):
    reply = message.from_user.full_name
    await message.answer(f"–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ , {reply}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
